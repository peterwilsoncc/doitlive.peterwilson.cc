{"version":3,"file":"./build/reusable-blocks/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window \"lodash\"","webpack://wp/external window [\"wp\",\"blockEditor\"]","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/actions.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/reducer.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/selectors.js","webpack://wp/./packages/reusable-blocks/build-module/store/@wordpress/reusable-blocks/src/store/index.js","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"primitives\"]","webpack://wp/./packages/icons/build-module/library/@wordpress/icons/src/library/symbol.js","webpack://wp/external window [\"wp\",\"notices\"]","webpack://wp/external window [\"wp\",\"coreData\"]","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-blocks-manage-button.js","webpack://wp/./packages/reusable-blocks/build-module/components/reusable-blocks-menu-items/@wordpress/reusable-blocks/src/components/reusable-blocks-menu-items/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","/**\n * External dependencies\n */\nimport { isFunction } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tcreateBlock,\n\tisReusableBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns a generator converting a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const __experimentalConvertBlockToStatic = ( clientId ) => ( {\n\tregistry,\n} ) => {\n\tconst oldBlock = registry.select( blockEditorStore ).getBlock( clientId );\n\tconst reusableBlock = registry\n\t\t.select( 'core' )\n\t\t.getEditedEntityRecord(\n\t\t\t'postType',\n\t\t\t'wp_block',\n\t\t\toldBlock.attributes.ref\n\t\t);\n\n\tconst newBlocks = parse(\n\t\tisFunction( reusableBlock.content )\n\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t: reusableBlock.content\n\t);\n\tregistry\n\t\t.dispatch( blockEditorStore )\n\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n};\n\n/**\n * Returns a generator converting one or more static blocks into a reusable block.\n *\n * @param {string[]} clientIds The client IDs of the block to detach.\n * @param {string}   title     Reusable block title.\n */\nexport const __experimentalConvertBlocksToReusable = (\n\tclientIds,\n\ttitle\n) => async ( { registry, dispatch } ) => {\n\tconst reusableBlock = {\n\t\ttitle: title || __( 'Untitled Reusable block' ),\n\t\tcontent: serialize(\n\t\t\tregistry.select( blockEditorStore ).getBlocksByClientId( clientIds )\n\t\t),\n\t\tstatus: 'publish',\n\t};\n\n\tconst updatedRecord = await registry\n\t\t.dispatch( 'core' )\n\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\tconst newBlock = createBlock( 'core/block', {\n\t\tref: updatedRecord.id,\n\t} );\n\tregistry.dispatch( blockEditorStore ).replaceBlocks( clientIds, newBlock );\n\tdispatch.__experimentalSetEditingReusableBlock( newBlock.clientId, true );\n};\n\n/**\n * Returns a generator deleting a reusable block.\n *\n * @param {string} id The ID of the reusable block to delete.\n */\nexport const __experimentalDeleteReusableBlock = ( id ) => async ( {\n\tregistry,\n} ) => {\n\tconst reusableBlock = registry\n\t\t.select( 'core' )\n\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t// Don't allow a reusable block with a temporary ID to be deleted.\n\tif ( ! reusableBlock ) {\n\t\treturn;\n\t}\n\n\t// Remove any other blocks that reference this reusable block.\n\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\n\tconst associatedBlocks = allBlocks.filter(\n\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t);\n\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t( block ) => block.clientId\n\t);\n\n\t// Remove the parsed block.\n\tif ( associatedBlockClientIds.length ) {\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.removeBlocks( associatedBlockClientIds );\n\t}\n\n\tawait registry\n\t\t.dispatch( 'core' )\n\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n};\n\n/**\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\n *\n * @param {string}  clientId  The clientID of the reusable block to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n","/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nexport function isEditingReusableBlock( state = {}, action ) {\n\tif ( action?.type === 'SET_EDITING_REUSABLE_BLOCK' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ action.clientId ]: action.isEditing,\n\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tisEditingReusableBlock,\n} );\n","/**\n * Returns true if reusable block is in the editing state.\n *\n * @param {Object} state    Global application state.\n * @param {number} clientId the clientID of the block.\n * @return {boolean} Whether the reusable block is in the editing state.\n */\nexport function __experimentalIsEditingReusableBlock( state, clientId ) {\n\treturn state.isEditingReusableBlock[ clientId ];\n}\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport * as actions from './actions';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/reusable-blocks';\n\n/**\n * Store definition for the reusable blocks namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\tactions,\n\treducer,\n\tselectors,\n} );\n\nregister( store );\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\n\nconst symbol = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\n\t</SVG>\n);\n\nexport default symbol;\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"notices\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport {\n\tBlockSettingsMenuControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tMenuItem,\n\tModal,\n\tButton,\n\tTextControl,\n\tFlex,\n\tFlexItem,\n} from '@wordpress/components';\nimport { symbol } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('@wordpress/element').WPComponent} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n} ) {\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst [ title, setTitle ] = useState( '' );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst { getBlocksByClientId, canInsertBlockType } = select(\n\t\t\t\tblockEditorStore\n\t\t\t);\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( coreStore ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootClientId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlocksToReusable: convertBlocksToReusable,\n\t} = useDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } = useDispatch(\n\t\tnoticesStore\n\t);\n\tconst onConvert = useCallback(\n\t\tasync function ( reusableBlockTitle ) {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable( clientIds, reusableBlockTitle );\n\t\t\t\tcreateSuccessNotice( __( 'Reusable block created.' ), {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[ clientIds ]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\ticon={ symbol }\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tsetIsModalOpen( true );\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Add to Reusable blocks' ) }\n\t\t\t\t\t</MenuItem>\n\t\t\t\t\t{ isModalOpen && (\n\t\t\t\t\t\t<Modal\n\t\t\t\t\t\t\ttitle={ __( 'Create Reusable block' ) }\n\t\t\t\t\t\t\tcloseLabel={ __( 'Close' ) }\n\t\t\t\t\t\t\tonRequestClose={ () => {\n\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<form\n\t\t\t\t\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\t\tonConvert( title );\n\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Flex\n\t\t\t\t\t\t\t\t\tclassName=\"reusable-blocks-menu-items__convert-modal-actions\"\n\t\t\t\t\t\t\t\t\tjustify=\"flex-end\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t\t\t\t<FlexItem>\n\t\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t\t\t\t\t{ __( 'Save' ) }\n\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t</FlexItem>\n\t\t\t\t\t\t\t\t</Flex>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t</Modal>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport {\n\tBlockSettingsMenuControls,\n\tstore as blockEditorStore,\n} from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from '../../store';\n\nfunction ReusableBlocksManageButton( { clientId } ) {\n\tconst { canRemove, isVisible } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlock, canRemoveBlock } = select( blockEditorStore );\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst reusableBlock = getBlock( clientId );\n\n\t\t\treturn {\n\t\t\t\tcanRemove: canRemoveBlock( clientId ),\n\t\t\t\tisVisible:\n\t\t\t\t\t!! reusableBlock &&\n\t\t\t\t\tisReusableBlock( reusableBlock ) &&\n\t\t\t\t\t!! canUser(\n\t\t\t\t\t\t'update',\n\t\t\t\t\t\t'blocks',\n\t\t\t\t\t\treusableBlock.attributes.ref\n\t\t\t\t\t),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst {\n\t\t__experimentalConvertBlockToStatic: convertBlockToStatic,\n\t} = useDispatch( reusableBlocksStore );\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t<MenuItem\n\t\t\t\thref={ addQueryArgs( 'edit.php', { post_type: 'wp_block' } ) }\n\t\t\t>\n\t\t\t\t{ __( 'Manage Reusable blocks' ) }\n\t\t\t</MenuItem>\n\t\t\t{ canRemove && (\n\t\t\t\t<MenuItem onClick={ () => convertBlockToStatic( clientId ) }>\n\t\t\t\t\t{ __( 'Convert to regular blocks' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n\nexport default ReusableBlocksManageButton;\n","/**\n * WordPress dependencies\n */\nimport { withSelect } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport ReusableBlockConvertButton from './reusable-block-convert-button';\nimport ReusableBlocksManageButton from './reusable-blocks-manage-button';\n\nfunction ReusableBlocksMenuItems( { clientIds, rootClientId } ) {\n\treturn (\n\t\t<>\n\t\t\t<ReusableBlockConvertButton\n\t\t\t\tclientIds={ clientIds }\n\t\t\t\trootClientId={ rootClientId }\n\t\t\t/>\n\t\t\t{ clientIds.length === 1 && (\n\t\t\t\t<ReusableBlocksManageButton clientId={ clientIds[ 0 ] } />\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default withSelect( ( select ) => {\n\tconst { getSelectedBlockClientIds } = select( blockEditorStore );\n\treturn {\n\t\tclientIds: getSelectedBlockClientIds(),\n\t};\n} )( ReusableBlocksMenuItems );\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","__experimentalConvertBlockToStatic","clientId","registry","oldBlock","select","blockEditorStore","getBlock","reusableBlock","getEditedEntityRecord","attributes","ref","newBlocks","parse","isFunction","content","dispatch","replaceBlocks","__experimentalConvertBlocksToReusable","clientIds","title","async","__","serialize","getBlocksByClientId","status","updatedRecord","saveEntityRecord","newBlock","createBlock","id","__experimentalSetEditingReusableBlock","__experimentalDeleteReusableBlock","associatedBlockClientIds","getBlocks","filter","block","isReusableBlock","map","length","removeBlocks","deleteEntityRecord","isEditing","type","combineReducers","isEditingReusableBlock","state","action","__experimentalIsEditingReusableBlock","store","createReduxStore","actions","reducer","selectors","register","SVG","xmlns","viewBox","Path","d","ReusableBlockConvertButton","rootClientId","isModalOpen","setIsModalOpen","useState","setTitle","canConvert","useSelect","canUser","coreStore","canInsertBlockType","blocks","getEntityRecord","every","isValid","hasBlockSupport","name","convertBlocksToReusable","useDispatch","createSuccessNotice","createErrorNotice","noticesStore","onConvert","useCallback","reusableBlockTitle","error","message","BlockSettingsMenuControls","onClose","MenuItem","icon","symbol","onClick","Modal","closeLabel","onRequestClose","overlayClassName","onSubmit","event","preventDefault","TextControl","label","onChange","Flex","className","justify","FlexItem","Button","variant","canRemove","isVisible","canRemoveBlock","convertBlockToStatic","reusableBlocksStore","href","addQueryArgs","post_type","withSelect","getSelectedBlockClientIds"],"sourceRoot":""}