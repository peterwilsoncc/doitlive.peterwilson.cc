{"version":3,"file":"./build/url/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-url.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-email.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-protocol.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-valid-protocol.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-authority.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-valid-authority.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-path.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-valid-path.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-query-string.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/build-query-string.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-valid-query-string.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-path-and-query-string.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-fragment.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/is-valid-fragment.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-query-args.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/add-query-args.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-query-arg.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/has-query-arg.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/remove-query-args.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/prepend-http.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/safe-decode-uri.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/safe-decode-uri-component.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/filter-url-for-display.js","webpack://wp/external window \"lodash\"","webpack://wp/./packages/url/build-module/@wordpress/url/src/clean-for-slug.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/get-filename.js","webpack://wp/./packages/url/build-module/@wordpress/url/src/normalize-path.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Determines whether the given string looks like a URL.\n *\n * @param {string} url The string to scrutinise.\n *\n * @example\n * ```js\n * const isURL = isURL( 'https://wordpress.org' ); // true\n * ```\n *\n * @see https://url.spec.whatwg.org/\n * @see https://url.spec.whatwg.org/#valid-url-string\n *\n * @return {boolean} Whether or not it looks like a URL.\n */\nexport function isURL( url ) {\n\t// A URL can be considered value if the `URL` constructor is able to parse\n\t// it. The constructor throws an error for an invalid URL.\n\ttry {\n\t\tnew URL( url );\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n}\n","const EMAIL_REGEXP = /^(mailto:)?[a-z0-9._%+-]+@[a-z0-9][a-z0-9.-]*\\.[a-z]{2,63}$/i;\n\n/**\n * Determines whether the given string looks like an email.\n *\n * @param {string} email The string to scrutinise.\n *\n * @example\n * ```js\n * const isEmail = isEmail( 'hello@wordpress.org' ); // true\n * ```\n *\n * @return {boolean} Whether or not it looks like an email.\n */\nexport function isEmail( email ) {\n\treturn EMAIL_REGEXP.test( email );\n}\n","/**\n * Returns the protocol part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const protocol1 = getProtocol( 'tel:012345678' ); // 'tel:'\n * const protocol2 = getProtocol( 'https://wordpress.org' ); // 'https:'\n * ```\n *\n * @return {string|void} The protocol part of the URL.\n */\nexport function getProtocol( url ) {\n\tconst matches = /^([^\\s:]+:)/.exec( url );\n\tif ( matches ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n","/**\n * Tests if a url protocol is valid.\n *\n * @param {string} protocol The url protocol.\n *\n * @example\n * ```js\n * const isValid = isValidProtocol( 'https:' ); // true\n * const isNotValid = isValidProtocol( 'https :' ); // false\n * ```\n *\n * @return {boolean} True if the argument is a valid protocol (e.g. http:, tel:).\n */\nexport function isValidProtocol( protocol ) {\n\tif ( ! protocol ) {\n\t\treturn false;\n\t}\n\treturn /^[a-z\\-.\\+]+[0-9]*:$/i.test( protocol );\n}\n","/**\n * Returns the authority part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const authority1 = getAuthority( 'https://wordpress.org/help/' ); // 'wordpress.org'\n * const authority2 = getAuthority( 'https://localhost:8080/test/' ); // 'localhost:8080'\n * ```\n *\n * @return {string|void} The authority part of the URL.\n */\nexport function getAuthority( url ) {\n\tconst matches = /^[^\\/\\s:]+:(?:\\/\\/)?\\/?([^\\/\\s#?]+)[\\/#?]{0,1}\\S*$/.exec(\n\t\turl\n\t);\n\tif ( matches ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n","/**\n * Checks for invalid characters within the provided authority.\n *\n * @param {string} authority A string containing the URL authority.\n *\n * @example\n * ```js\n * const isValid = isValidAuthority( 'wordpress.org' ); // true\n * const isNotValid = isValidAuthority( 'wordpress#org' ); // false\n * ```\n *\n * @return {boolean} True if the argument contains a valid authority.\n */\nexport function isValidAuthority( authority ) {\n\tif ( ! authority ) {\n\t\treturn false;\n\t}\n\treturn /^[^\\s#?]+$/.test( authority );\n}\n","/**\n * Returns the path part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const path1 = getPath( 'http://localhost:8080/this/is/a/test?query=true' ); // 'this/is/a/test'\n * const path2 = getPath( 'https://wordpress.org/help/faq/' ); // 'help/faq'\n * ```\n *\n * @return {string|void} The path part of the URL.\n */\nexport function getPath( url ) {\n\tconst matches = /^[^\\/\\s:]+:(?:\\/\\/)?[^\\/\\s#?]+[\\/]([^\\s#?]+)[#?]{0,1}\\S*$/.exec(\n\t\turl\n\t);\n\tif ( matches ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n","/**\n * Checks for invalid characters within the provided path.\n *\n * @param {string} path The URL path.\n *\n * @example\n * ```js\n * const isValid = isValidPath( 'test/path/' ); // true\n * const isNotValid = isValidPath( '/invalid?test/path/' ); // false\n * ```\n *\n * @return {boolean} True if the argument contains a valid path\n */\nexport function isValidPath( path ) {\n\tif ( ! path ) {\n\t\treturn false;\n\t}\n\treturn /^[^\\s#?]+$/.test( path );\n}\n","/**\n * Returns the query string part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const queryString = getQueryString( 'http://localhost:8080/this/is/a/test?query=true#fragment' ); // 'query=true'\n * ```\n *\n * @return {string|void} The query string part of the URL.\n */\nexport function getQueryString( url ) {\n\tlet query;\n\ttry {\n\t\tquery = new URL( url, 'http://example.com' ).search.substring( 1 );\n\t} catch ( error ) {}\n\n\tif ( query ) {\n\t\treturn query;\n\t}\n}\n","/**\n * Generates URL-encoded query string using input query data.\n *\n * It is intended to behave equivalent as PHP's `http_build_query`, configured\n * with encoding type PHP_QUERY_RFC3986 (spaces as `%20`).\n *\n * @example\n * ```js\n * const queryString = buildQueryString( {\n *    simple: 'is ok',\n *    arrays: [ 'are', 'fine', 'too' ],\n *    objects: {\n *       evenNested: {\n *          ok: 'yes',\n *       },\n *    },\n * } );\n * // \"simple=is%20ok&arrays%5B0%5D=are&arrays%5B1%5D=fine&arrays%5B2%5D=too&objects%5BevenNested%5D%5Bok%5D=yes\"\n * ```\n *\n * @param {Record<string,*>} data Data to encode.\n *\n * @return {string} Query string.\n */\nexport function buildQueryString( data ) {\n\tlet string = '';\n\n\tconst stack = Object.entries( data );\n\n\tlet pair;\n\twhile ( ( pair = stack.shift() ) ) {\n\t\tlet [ key, value ] = pair;\n\n\t\t// Support building deeply nested data, from array or object values.\n\t\tconst hasNestedData =\n\t\t\tArray.isArray( value ) || ( value && value.constructor === Object );\n\n\t\tif ( hasNestedData ) {\n\t\t\t// Push array or object values onto the stack as composed of their\n\t\t\t// original key and nested index or key, retaining order by a\n\t\t\t// combination of Array#reverse and Array#unshift onto the stack.\n\t\t\tconst valuePairs = Object.entries( value ).reverse();\n\t\t\tfor ( const [ member, memberValue ] of valuePairs ) {\n\t\t\t\tstack.unshift( [ `${ key }[${ member }]`, memberValue ] );\n\t\t\t}\n\t\t} else if ( value !== undefined ) {\n\t\t\t// Null is treated as special case, equivalent to empty string.\n\t\t\tif ( value === null ) {\n\t\t\t\tvalue = '';\n\t\t\t}\n\n\t\t\tstring +=\n\t\t\t\t'&' + [ key, value ].map( encodeURIComponent ).join( '=' );\n\t\t}\n\t}\n\n\t// Loop will concatenate with leading `&`, but it's only expected for all\n\t// but the first query parameter. This strips the leading `&`, while still\n\t// accounting for the case that the string may in-fact be empty.\n\treturn string.substr( 1 );\n}\n","/**\n * Checks for invalid characters within the provided query string.\n *\n * @param {string} queryString The query string.\n *\n * @example\n * ```js\n * const isValid = isValidQueryString( 'query=true&another=false' ); // true\n * const isNotValid = isValidQueryString( 'query=true?another=false' ); // false\n * ```\n *\n * @return {boolean} True if the argument contains a valid query string.\n */\nexport function isValidQueryString( queryString ) {\n\tif ( ! queryString ) {\n\t\treturn false;\n\t}\n\treturn /^[^\\s#?\\/]+$/.test( queryString );\n}\n","/**\n * Internal dependencies\n */\nimport { getPath, getQueryString } from '.';\n\n/**\n * Returns the path part and query string part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const pathAndQueryString1 = getPathAndQueryString( 'http://localhost:8080/this/is/a/test?query=true' ); // '/this/is/a/test?query=true'\n * const pathAndQueryString2 = getPathAndQueryString( 'https://wordpress.org/help/faq/' ); // '/help/faq'\n * ```\n *\n * @return {string} The path part and query string part of the URL.\n */\nexport function getPathAndQueryString( url ) {\n\tconst path = getPath( url );\n\tconst queryString = getQueryString( url );\n\tlet value = '/';\n\tif ( path ) value += path;\n\tif ( queryString ) value += `?${ queryString }`;\n\treturn value;\n}\n","/**\n * Returns the fragment part of the URL.\n *\n * @param {string} url The full URL\n *\n * @example\n * ```js\n * const fragment1 = getFragment( 'http://localhost:8080/this/is/a/test?query=true#fragment' ); // '#fragment'\n * const fragment2 = getFragment( 'https://wordpress.org#another-fragment?query=true' ); // '#another-fragment'\n * ```\n *\n * @return {string|void} The fragment part of the URL.\n */\nexport function getFragment( url ) {\n\tconst matches = /^\\S+?(#[^\\s\\?]*)/.exec( url );\n\tif ( matches ) {\n\t\treturn matches[ 1 ];\n\t}\n}\n","/**\n * Checks for invalid characters within the provided fragment.\n *\n * @param {string} fragment The url fragment.\n *\n * @example\n * ```js\n * const isValid = isValidFragment( '#valid-fragment' ); // true\n * const isNotValid = isValidFragment( '#invalid-#fragment' ); // false\n * ```\n *\n * @return {boolean} True if the argument contains a valid fragment.\n */\nexport function isValidFragment( fragment ) {\n\tif ( ! fragment ) {\n\t\treturn false;\n\t}\n\treturn /^#[^\\s#?\\/]*$/.test( fragment );\n}\n","/**\n * Internal dependencies\n */\nimport { getQueryString } from './get-query-string';\n\n/** @typedef {import('./get-query-arg').QueryArgParsed} QueryArgParsed */\n\n/**\n * @typedef {Record<string,QueryArgParsed>} QueryArgs\n */\n\n/**\n * Sets a value in object deeply by a given array of path segments. Mutates the\n * object reference.\n *\n * @param {Record<string,*>} object Object in which to assign.\n * @param {string[]}         path   Path segment at which to set value.\n * @param {*}                value  Value to set.\n */\nfunction setPath( object, path, value ) {\n\tconst length = path.length;\n\tconst lastIndex = length - 1;\n\tfor ( let i = 0; i < length; i++ ) {\n\t\tlet key = path[ i ];\n\n\t\tif ( ! key && Array.isArray( object ) ) {\n\t\t\t// If key is empty string and next value is array, derive key from\n\t\t\t// the current length of the array.\n\t\t\tkey = object.length.toString();\n\t\t}\n\n\t\tkey = [ '__proto__', 'constructor', 'prototype' ].includes( key )\n\t\t\t? key.toUpperCase()\n\t\t\t: key;\n\n\t\t// If the next key in the path is numeric (or empty string), it will be\n\t\t// created as an array. Otherwise, it will be created as an object.\n\t\tconst isNextKeyArrayIndex = ! isNaN( Number( path[ i + 1 ] ) );\n\n\t\tobject[ key ] =\n\t\t\ti === lastIndex\n\t\t\t\t? // If at end of path, assign the intended value.\n\t\t\t\t  value\n\t\t\t\t: // Otherwise, advance to the next object in the path, creating\n\t\t\t\t  // it if it does not yet exist.\n\t\t\t\t  object[ key ] || ( isNextKeyArrayIndex ? [] : {} );\n\n\t\tif ( Array.isArray( object[ key ] ) && ! isNextKeyArrayIndex ) {\n\t\t\t// If we current key is non-numeric, but the next value is an\n\t\t\t// array, coerce the value to an object.\n\t\t\tobject[ key ] = { ...object[ key ] };\n\t\t}\n\n\t\t// Update working reference object to the next in the path.\n\t\tobject = object[ key ];\n\t}\n}\n\n/**\n * Returns an object of query arguments of the given URL. If the given URL is\n * invalid or has no querystring, an empty object is returned.\n *\n * @param {string} url URL.\n *\n * @example\n * ```js\n * const foo = getQueryArgs( 'https://wordpress.org?foo=bar&bar=baz' );\n * // { \"foo\": \"bar\", \"bar\": \"baz\" }\n * ```\n *\n * @return {QueryArgs} Query args object.\n */\nexport function getQueryArgs( url ) {\n\treturn (\n\t\t( getQueryString( url ) || '' )\n\t\t\t// Normalize space encoding, accounting for PHP URL encoding\n\t\t\t// corresponding to `application/x-www-form-urlencoded`.\n\t\t\t//\n\t\t\t// See: https://tools.ietf.org/html/rfc1866#section-8.2.1\n\t\t\t.replace( /\\+/g, '%20' )\n\t\t\t.split( '&' )\n\t\t\t.reduce( ( accumulator, keyValue ) => {\n\t\t\t\tconst [ key, value = '' ] = keyValue\n\t\t\t\t\t.split( '=' )\n\t\t\t\t\t// Filtering avoids decoding as `undefined` for value, where\n\t\t\t\t\t// default is restored in destructuring assignment.\n\t\t\t\t\t.filter( Boolean )\n\t\t\t\t\t.map( decodeURIComponent );\n\n\t\t\t\tif ( key ) {\n\t\t\t\t\tconst segments = key.replace( /\\]/g, '' ).split( '[' );\n\t\t\t\t\tsetPath( accumulator, segments, value );\n\t\t\t\t}\n\n\t\t\t\treturn accumulator;\n\t\t\t}, Object.create( null ) )\n\t);\n}\n","/**\n * Internal dependencies\n */\nimport { getQueryArgs } from './get-query-args';\nimport { buildQueryString } from './build-query-string';\n\n/**\n * Appends arguments as querystring to the provided URL. If the URL already\n * includes query arguments, the arguments are merged with (and take precedent\n * over) the existing set.\n *\n * @param {string} [url=''] URL to which arguments should be appended. If omitted,\n *                          only the resulting querystring is returned.\n * @param {Object} [args]   Query arguments to apply to URL.\n *\n * @example\n * ```js\n * const newURL = addQueryArgs( 'https://google.com', { q: 'test' } ); // https://google.com/?q=test\n * ```\n *\n * @return {string} URL with arguments applied.\n */\nexport function addQueryArgs( url = '', args ) {\n\t// If no arguments are to be appended, return original URL.\n\tif ( ! args || ! Object.keys( args ).length ) {\n\t\treturn url;\n\t}\n\n\tlet baseUrl = url;\n\n\t// Determine whether URL already had query arguments.\n\tconst queryStringIndex = url.indexOf( '?' );\n\tif ( queryStringIndex !== -1 ) {\n\t\t// Merge into existing query arguments.\n\t\targs = Object.assign( getQueryArgs( url ), args );\n\n\t\t// Change working base URL to omit previous query arguments.\n\t\tbaseUrl = baseUrl.substr( 0, queryStringIndex );\n\t}\n\n\treturn baseUrl + '?' + buildQueryString( args );\n}\n","/**\n * Internal dependencies\n */\nimport { getQueryArgs } from './get-query-args';\n\n/**\n * @typedef {{[key: string]: QueryArgParsed}} QueryArgObject\n */\n\n/**\n * @typedef {string|string[]|QueryArgObject} QueryArgParsed\n */\n\n/**\n * Returns a single query argument of the url\n *\n * @param {string} url URL.\n * @param {string} arg Query arg name.\n *\n * @example\n * ```js\n * const foo = getQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'foo' ); // bar\n * ```\n *\n * @return {QueryArgParsed|void} Query arg value.\n */\nexport function getQueryArg( url, arg ) {\n\treturn getQueryArgs( url )[ arg ];\n}\n","/**\n * Internal dependencies\n */\nimport { getQueryArg } from './get-query-arg';\n\n/**\n * Determines whether the URL contains a given query arg.\n *\n * @param {string} url URL.\n * @param {string} arg Query arg name.\n *\n * @example\n * ```js\n * const hasBar = hasQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'bar' ); // true\n * ```\n *\n * @return {boolean} Whether or not the URL contains the query arg.\n */\nexport function hasQueryArg( url, arg ) {\n\treturn getQueryArg( url, arg ) !== undefined;\n}\n","/**\n * Internal dependencies\n */\nimport { getQueryArgs } from './get-query-args';\nimport { buildQueryString } from './build-query-string';\n\n/**\n * Removes arguments from the query string of the url\n *\n * @param {string}    url  URL.\n * @param {...string} args Query Args.\n *\n * @example\n * ```js\n * const newUrl = removeQueryArgs( 'https://wordpress.org?foo=bar&bar=baz&baz=foobar', 'foo', 'bar' ); // https://wordpress.org?baz=foobar\n * ```\n *\n * @return {string} Updated URL.\n */\nexport function removeQueryArgs( url, ...args ) {\n\tconst queryStringIndex = url.indexOf( '?' );\n\tif ( queryStringIndex === -1 ) {\n\t\treturn url;\n\t}\n\n\tconst query = getQueryArgs( url );\n\tconst baseURL = url.substr( 0, queryStringIndex );\n\targs.forEach( ( arg ) => delete query[ arg ] );\n\tconst queryString = buildQueryString( query );\n\treturn queryString ? baseURL + '?' + queryString : baseURL;\n}\n","/**\n * Internal dependencies\n */\nimport { isEmail } from './is-email';\n\nconst USABLE_HREF_REGEXP = /^(?:[a-z]+:|#|\\?|\\.|\\/)/i;\n\n/**\n * Prepends \"http://\" to a url, if it looks like something that is meant to be a TLD.\n *\n * @param {string} url The URL to test.\n *\n * @example\n * ```js\n * const actualURL = prependHTTP( 'wordpress.org' ); // http://wordpress.org\n * ```\n *\n * @return {string} The updated URL.\n */\nexport function prependHTTP( url ) {\n\tif ( ! url ) {\n\t\treturn url;\n\t}\n\n\turl = url.trim();\n\tif ( ! USABLE_HREF_REGEXP.test( url ) && ! isEmail( url ) ) {\n\t\treturn 'http://' + url;\n\t}\n\n\treturn url;\n}\n","/**\n * Safely decodes a URI with `decodeURI`. Returns the URI unmodified if\n * `decodeURI` throws an error.\n *\n * @param {string} uri URI to decode.\n *\n * @example\n * ```js\n * const badUri = safeDecodeURI( '%z' ); // does not throw an Error, simply returns '%z'\n * ```\n *\n * @return {string} Decoded URI if possible.\n */\nexport function safeDecodeURI( uri ) {\n\ttry {\n\t\treturn decodeURI( uri );\n\t} catch ( uriError ) {\n\t\treturn uri;\n\t}\n}\n","/**\n * Safely decodes a URI component with `decodeURIComponent`. Returns the URI component unmodified if\n * `decodeURIComponent` throws an error.\n *\n * @param {string} uriComponent URI component to decode.\n *\n * @return {string} Decoded URI component if possible.\n */\nexport function safeDecodeURIComponent( uriComponent ) {\n\ttry {\n\t\treturn decodeURIComponent( uriComponent );\n\t} catch ( uriComponentError ) {\n\t\treturn uriComponent;\n\t}\n}\n","/**\n * Returns a URL for display.\n *\n * @param {string}      url       Original URL.\n * @param {number|null} maxLength URL length.\n *\n * @example\n * ```js\n * const displayUrl = filterURLForDisplay( 'https://www.wordpress.org/gutenberg/' ); // wordpress.org/gutenberg\n * const imageUrl = filterURLForDisplay( 'https://www.wordpress.org/wp-content/uploads/img.png', 20 ); // …ent/uploads/img.png\n * ```\n *\n * @return {string} Displayed URL.\n */\nexport function filterURLForDisplay( url, maxLength = null ) {\n\t// Remove protocol and www prefixes.\n\tlet filteredURL = url.replace( /^(?:https?:)\\/\\/(?:www\\.)?/, '' );\n\n\t// Ends with / and only has that single slash, strip it.\n\tif ( filteredURL.match( /^[^\\/]+\\/$/ ) ) {\n\t\tfilteredURL = filteredURL.replace( '/', '' );\n\t}\n\n\tconst mediaRegexp = /([\\w|:])*\\.(?:jpg|jpeg|gif|png|svg)/;\n\n\tif (\n\t\t! maxLength ||\n\t\tfilteredURL.length <= maxLength ||\n\t\t! filteredURL.match( mediaRegexp )\n\t) {\n\t\treturn filteredURL;\n\t}\n\n\t// If the file is not greater than max length, return last portion of URL.\n\tfilteredURL = filteredURL.split( '?' )[ 0 ];\n\tconst urlPieces = filteredURL.split( '/' );\n\tconst file = urlPieces[ urlPieces.length - 1 ];\n\tif ( file.length <= maxLength ) {\n\t\treturn '…' + filteredURL.slice( -maxLength );\n\t}\n\n\t// If the file is greater than max length, truncate the file.\n\tconst index = file.lastIndexOf( '.' );\n\tconst [ fileName, extension ] = [\n\t\tfile.slice( 0, index ),\n\t\tfile.slice( index + 1 ),\n\t];\n\tconst truncatedFile = fileName.slice( -3 ) + '.' + extension;\n\treturn (\n\t\tfile.slice( 0, maxLength - truncatedFile.length - 1 ) +\n\t\t'…' +\n\t\ttruncatedFile\n\t);\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"lodash\"];","/**\n * External dependencies\n */\nimport { deburr, trim } from 'lodash';\n\n/**\n * Performs some basic cleanup of a string for use as a post slug.\n *\n * This replicates some of what `sanitize_title()` does in WordPress core, but\n * is only designed to approximate what the slug will be.\n *\n * Converts Latin-1 Supplement and Latin Extended-A letters to basic Latin\n * letters. Removes combining diacritical marks. Converts whitespace, periods,\n * and forward slashes to hyphens. Removes any remaining non-word characters\n * except hyphens. Converts remaining string to lowercase. It does not account\n * for octets, HTML entities, or other encoded characters.\n *\n * @param {string} string Title or slug to be processed.\n *\n * @return {string} Processed string.\n */\nexport function cleanForSlug( string ) {\n\tif ( ! string ) {\n\t\treturn '';\n\t}\n\treturn trim(\n\t\tdeburr( string )\n\t\t\t.replace( /[\\s\\./]+/g, '-' )\n\t\t\t.replace( /[^\\p{L}\\p{N}_-]+/gu, '' )\n\t\t\t.toLowerCase(),\n\t\t'-'\n\t);\n}\n","/**\n * Returns the filename part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const filename1 = getFilename( 'http://localhost:8080/this/is/a/test.jpg' ); // 'test.jpg'\n * const filename2 = getFilename( '/this/is/a/test.png' ); // 'test.png'\n * ```\n *\n * @return {string|void} The filename part of the URL.\n */\nexport function getFilename( url ) {\n\tlet filename;\n\ttry {\n\t\tfilename = new URL( url, 'http://example.com' ).pathname\n\t\t\t.split( '/' )\n\t\t\t.pop();\n\t} catch ( error ) {}\n\n\tif ( filename ) {\n\t\treturn filename;\n\t}\n}\n","/**\n * Given a path, returns a normalized path where equal query parameter values\n * will be treated as identical, regardless of order they appear in the original\n * text.\n *\n * @param {string} path Original path.\n *\n * @return {string} Normalized path.\n */\nexport function normalizePath( path ) {\n\tconst splitted = path.split( '?' );\n\tconst query = splitted[ 1 ];\n\tconst base = splitted[ 0 ];\n\tif ( ! query ) {\n\t\treturn base;\n\t}\n\n\t// 'b=1%2C2&c=2&a=5'\n\treturn (\n\t\tbase +\n\t\t'?' +\n\t\tquery\n\t\t\t// [ 'b=1%2C2', 'c=2', 'a=5' ]\n\t\t\t.split( '&' )\n\t\t\t// [ [ 'b, '1%2C2' ], [ 'c', '2' ], [ 'a', '5' ] ]\n\t\t\t.map( ( entry ) => entry.split( '=' ) )\n\t\t\t// [ [ 'b', '1,2' ], [ 'c', '2' ], [ 'a', '5' ] ]\n\t\t\t.map( ( pair ) => pair.map( decodeURIComponent ) )\n\t\t\t// [ [ 'a', '5' ], [ 'b, '1,2' ], [ 'c', '2' ] ]\n\t\t\t.sort( ( a, b ) => a[ 0 ].localeCompare( b[ 0 ] ) )\n\t\t\t// [ [ 'a', '5' ], [ 'b, '1%2C2' ], [ 'c', '2' ] ]\n\t\t\t.map( ( pair ) => pair.map( encodeURIComponent ) )\n\t\t\t// [ 'a=5', 'b=1%2C2', 'c=2' ]\n\t\t\t.map( ( pair ) => pair.join( '=' ) )\n\t\t\t// 'a=5&b=1%2C2&c=2'\n\t\t\t.join( '&' )\n\t);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","isURL","url","URL","EMAIL_REGEXP","isEmail","email","test","getProtocol","matches","exec","isValidProtocol","protocol","getAuthority","isValidAuthority","authority","getPath","isValidPath","path","getQueryString","query","search","substring","error","buildQueryString","data","string","stack","entries","pair","shift","Array","isArray","constructor","valuePairs","reverse","member","memberValue","unshift","undefined","map","encodeURIComponent","join","substr","isValidQueryString","queryString","getPathAndQueryString","getFragment","isValidFragment","fragment","getQueryArgs","replace","split","reduce","accumulator","keyValue","filter","Boolean","decodeURIComponent","object","length","lastIndex","i","toString","includes","toUpperCase","isNextKeyArrayIndex","isNaN","Number","setPath","create","addQueryArgs","args","keys","baseUrl","queryStringIndex","indexOf","assign","getQueryArg","arg","hasQueryArg","removeQueryArgs","baseURL","forEach","USABLE_HREF_REGEXP","prependHTTP","trim","safeDecodeURI","uri","decodeURI","uriError","safeDecodeURIComponent","uriComponent","uriComponentError","filterURLForDisplay","maxLength","filteredURL","match","mediaRegexp","urlPieces","file","slice","index","lastIndexOf","fileName","extension","truncatedFile","window","cleanForSlug","deburr","toLowerCase","getFilename","filename","pathname","pop","normalizePath","splitted","base","entry","sort","a","b","localeCompare"],"sourceRoot":""}